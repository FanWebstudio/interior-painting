---
import { getImage } from 'astro:assets';

interface Props {
  src: string;
  alt: string;
  width: number;
  height: number;
  class?: string;
  sizes?: string;
  style?: string;
  format?: 'avif' | 'webp' | 'png' | 'jpg';
  quality?: number;
  loading?: 'lazy' | 'eager';
  decoding?: 'async' | 'sync' | 'auto';
  role?: string;
  longdesc?: string;
}

const {
  src,
  alt,
  width,
  height,
  class: className = '',
  sizes = '100vw',
  style,
  format = 'avif',
  quality = 80,
  loading = 'lazy',
  decoding = 'async',
  role,
  longdesc
} = Astro.props;

// Check if the image is from an external source or SVG
const isExternal = src.startsWith('http');
const isSvg = src.endsWith('.svg');
const isPublic = src.startsWith('/');

// Generate srcSet for external images
const generateSrcSet = (src: string) => {
  if (!isExternal || isSvg) return undefined;

  // Special handling for Unsplash images
  if (src.includes('unsplash.com')) {
    const baseUrl = src.split('?')[0];
    return [320, 640, 768, 1024, 1280, 1536]
      .map((size) => `${baseUrl}?auto=format&fit=crop&w=${size}&q=${quality}&fm=${format} ${size}w`)
      .join(', ');
  }

  return undefined;
};

// Calculate aspect ratio for proper sizing
const aspectRatio = width && height ? width / height : undefined;

// Ensure alt text is descriptive
const processedAlt = alt || '';
if (!alt) {
  console.warn('Warning: Image is missing alt text. Please provide descriptive alt text for accessibility.');
}

---

{
  isSvg ? (
    <img
      src={src}
      alt={processedAlt}
      width={width}
      height={height}
      class:list={[className, 'max-w-full h-auto']}
      style={`aspect-ratio: ${aspectRatio}; ${style || ''}`}
      role={role || (processedAlt === '' ? 'presentation' : undefined)}
      longdesc={longdesc}
      aria-hidden={processedAlt === ''}
    />
  ) : isPublic ? (
    <img
      src={src}
      alt={processedAlt}
      width={width}
      height={height}
      class:list={[
        className,
        'transition-opacity duration-300 opacity-0 max-w-full h-auto',
      ]}
      loading={loading}
      decoding={decoding}
      onload="this.classList.remove('opacity-0')"
      style={`aspect-ratio: ${aspectRatio}; ${style || ''}`}
      role={role || (processedAlt === '' ? 'presentation' : undefined)}
      longdesc={longdesc}
      aria-hidden={processedAlt === ''}
    />
  ) : isExternal ? (
    <img
      src={src}
      alt={processedAlt}
      width={width}
      height={height}
      class:list={[
        className,
        'transition-opacity duration-300 opacity-0 max-w-full h-auto',
      ]}
      loading={loading}
      decoding={decoding}
      sizes={sizes}
      srcset={generateSrcSet(src)}
      onload="this.classList.remove('opacity-0')"
      style={`aspect-ratio: ${aspectRatio}; ${style || ''}`}
      role={role || (processedAlt === '' ? 'presentation' : undefined)}
      longdesc={longdesc}
      aria-hidden={processedAlt === ''}
    />
  ) : (
    <img
      src={src}
      alt={processedAlt}
      width={width}
      height={height}
      class:list={[
        className,
        'transition-opacity duration-300 opacity-0 max-w-full h-auto',
      ]}
      loading={loading}
      decoding={decoding}
      onload="this.classList.remove('opacity-0')"
      style={`aspect-ratio: ${aspectRatio}; ${style || ''}`}
      role={role || (processedAlt === '' ? 'presentation' : undefined)}
      longdesc={longdesc}
      aria-hidden={processedAlt === ''}
    />
  )
}

<script>
  // Intersection Observer for lazy loading
  const lazyImages = document.querySelectorAll('img[loading="lazy"]');
  const imageObserver = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const img = entry.target as HTMLImageElement;
        if (img.dataset.src) {
          img.src = img.dataset.src;
        }
        imageObserver.unobserve(img);
      }
    });
  });

  lazyImages.forEach((img) => imageObserver.observe(img));
</script>
