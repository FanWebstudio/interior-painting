---
import { getImage } from 'astro:assets';

interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  sizes?: string;
  style?: string;
  format?: 'webp' | 'avif' | 'png' | 'jpg';
  quality?: number;
}

const {
  src,
  alt,
  width,
  height,
  class: className = '',
  sizes = '100vw',
  style,
  format = 'webp',
  quality = 80,
} = Astro.props;

// Check if the image is from an external source or SVG
const isExternal = src.startsWith('http');
const isSvg = src.endsWith('.svg');
const isPublic = src.startsWith('/');

// Generate srcSet for external images
const generateSrcSet = (src: string) => {
  if (!isExternal || isSvg) return undefined;

  // Special handling for Unsplash images
  if (src.includes('unsplash.com')) {
    const baseUrl = src.split('?')[0];
    return [320, 640, 768, 1024, 1280, 1536]
      .map((size) => `${baseUrl}?auto=format&fit=crop&w=${size}&q=${quality} ${size}w`)
      .join(', ');
  }

  return undefined;
};
---

{
  isSvg ? (
    <img
      src={src}
      alt={alt}
      width={width}
      height={height}
      class:list={[className, 'max-w-full w-auto']}
      style={style}
    />
  ) : isPublic ? (
    <img
      src={src}
      alt={alt}
      width={width}
      height={height}
      class:list={[
        className,
        'transition-opacity duration-300 opacity-0 max-w-full w-auto',
      ]}
      loading="lazy"
      decoding="async"
      onload="this.classList.remove('opacity-0')"
      style={`${style || ''}; height: auto;`}
    />
  ) : isExternal ? (
    <img
      src={src}
      alt={alt}
      width={width}
      height={height}
      class:list={[
        className,
        'transition-opacity duration-300 opacity-0 max-w-full w-auto',
      ]}
      loading="lazy"
      decoding="async"
      sizes={sizes}
      srcset={generateSrcSet(src)}
      onload="this.classList.remove('opacity-0')"
      style={`${style || ''}; height: auto;`}
    />
  ) : (
    <img
      src={src}
      alt={alt}
      width={width}
      height={height}
      class:list={[
        className,
        'transition-opacity duration-300 opacity-0 max-w-full w-auto',
      ]}
      loading="lazy"
      decoding="async"
      onload="this.classList.remove('opacity-0')"
      style={`${style || ''}; height: auto;`}
    />
  )
}

<style>
  img {
    will-change: opacity;
  }
</style>

<script>
  // Intersection Observer for enhanced lazy loading
  const images = document.querySelectorAll('img[loading="lazy"]:not([src$=".svg"])');

  if ('IntersectionObserver' in window) {
    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const img = entry.target as HTMLImageElement;
          if (img.dataset.src) {
            img.src = img.dataset.src;
            img.removeAttribute('data-src');
          }
          observer.unobserve(img);
        }
      });
    });

    images.forEach((img) => imageObserver.observe(img));
  }
</script>
